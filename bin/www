#!/usr/bin/env node
var app = require('../app');
var http = require('http');
var mdns = require('mdns');
var fs = require('fs');
var os = require('os');
var path = require('path');
var chokidar = require('chokidar');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3001');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/*
 * Create WebSocket server.
 */

if (os.platform() === 'win32') {
  console.log("OS detected as Windows. WebSocket server will not start. Run on Raspberry Pi/Linux for full functionality.")
} else {
  var io = require('../ws/control')(server);

  // Watch for changes in selected emulator
  var currentEmulatorPath = path.join(os.homedir(), 'current-emulator.txt');
  chokidar.watch(currentEmulatorPath, { persistent: true}).on('all', (event, path) => {
    fs.readFile(currentEmulatorPath, 'utf8', function(err, data) {
      console.log('Current Emulator: ' + data);
      io.emitCurrentEmulator(data);
    });
  });
}

/**
 * Create mDNS advertisement.
 */

var advertisement = mdns.createAdvertisement(mdns.tcp('flyweb'), port, {
  name: 'RetroPie FlyWeb Controller',
  txtRecord: {}
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);
server.on('close', onClose);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  console.log('Listening on ' + bind);

  // Start broadcasting the mDNS advertisement.
  advertisement.start();
}

/**
 * Event listener for HTTP server "close" event.
 */

function onClose() {
  // Stop broadcasting the mDNS advertisement.
  advertisement.stop();
}
